*dubs_toggle_textwrap.txt*	For Vim version 7.4.	Last change: 2015 Jan 23

Dubs Vim -- ToggleWrap~

LINE WRAPPING SMART TOGGLE		*dubs-toggle-textwrap*

1. About This Plugin			|dubs-togglr-about|
2. Smartly Toggle Commands		|dubs-togglr-commands|

==============================================================================
1. About This Plugin					*dubs-togglr-about*

ToggleWrap is a Vim plugin to make working 
with and without text wrapping more pleasant.

Project page: https://github.com/landonb/dubs_toggle_textwrap

This plugin was inspired by code by Harold Gim√©nez

  http://awesomeful.net/posts/57-small-collection-of-useful-vim-tricks

==============================================================================
2. Smartly Toggle Commands				*dubs-togglr-commands*

Interactive Entity Table~

				*<Leader>w* *\w*
<Leader>w		Toggle line wrapping on and off, rather
			than using 'set wrap' and 'set nowrap'.

			In addition to being the same command for
			either operation, the \w toggler configures
			cursor navigation to traverse visual boundaries
			when wrapping, otherwise, when not wrapping,
			navigation is set to traverse only logical
			boundaries.

Why ':set wrap' Isn't Enough~

The 'wrap' option does exactly what it says -- 
it visually wraps text that otherwise would
extend past the right edge of a window.

However, setting 'wrap' doesn't change the
behavior of the navigation keys, so you might
notice something -- using <Up>, <Down>, <Home>,
and <End> keys applies to the logical text line,
not to the visual line.

E.g., suppose a long line is wrapped and now 
spans four visual lines in a window; if you 
put the cursor at the start of the line of 
text and then press <Down>, rather than moving 
the cursor down by one visual line, the 
cursor instead jumps four visuals lines down 
to the next actual line in the document (i.e., 
past the next newline it finds).

Another e.g., if you press <Home>, the cursor 
jumps to the logical start of the line, which 
may be on a visual line above the current one.

Fortunately, Vim supports visual line 
navigation as well as logical line navigation.
So now, when in wrap mode, we remap <Up> and
<Down> to move the cursor by one visual line
rather than by one logical line, and <Home>
and <End> move the cursor to the start and end 
of the current visual line, respectively.

 vim:tw=78:ts=8:ft=help:norl:
